<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
    	<link rel="canonical" href="https://vpngateway.github.io/news/article-109639.htm" />
	<!-- basic -->
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
	<!-- mobile metas -->
	<meta name="viewport" content="width=device-width, initial-scale=1">
	<meta name="viewport" content="initial-scale=1, maximum-scale=1">
	<!-- site metas -->
	<title>在vue项目中配置使用svg</title>
		<meta name="description" content="日常使用svg作为图标使用已经很常见了,以下为几种使用方式 . file-loader 解析资源文件 最原始的无非就是直接导入使用了 , webpack使用了file-loader 对所有静态资源进行" />
	
    <meta name="author" content="VPN网关 VPN免费节点订阅官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vpngateway.github.io/news/article-109639.htm" />
    <meta property="og:site_name" content="VPN网关 VPN免费节点订阅官网" />
    <meta property="og:title" content="在vue项目中配置使用svg" />
    <meta property="og:image" content="https://vpngateway.github.io/uploads/20240323/7c56d3b638aba64d8bf193713bd438d3.webp" />
        <meta property="og:release_date" content="2025-05-02T09:23:00" />
    <meta property="og:updated_time" content="2025-05-02T09:23:00" />
        <meta property="og:description" content="日常使用svg作为图标使用已经很常见了,以下为几种使用方式 . file-loader 解析资源文件 最原始的无非就是直接导入使用了 , webpack使用了file-loader 对所有静态资源进行" />
        
	<!-- bootstrap css -->
	<link rel="stylesheet" type="text/css" href="/assets/website/css/clashnodesfree/bootstrap.min.css">
	<!-- style css -->
	<link rel="stylesheet" type="text/css" href="/assets/website/css/clashnodesfree/style.css">
	<!-- Responsive-->
	<link rel="stylesheet" href="/assets/website/css/clashnodesfree/responsive.css">
	<!-- favicon -->
	<link rel="icon" href="/assets/website/img/clashnodesfree/favicon.ico" type="image/x-icon"/>
	<!-- Scrollbar Custom CSS -->
	<link rel="stylesheet" href="/assets/website/css/clashnodesfree/jquery.mCustomScrollbar.min.css">
	<!-- Tweaks for older IEs-->
	<link rel="stylesheet" href="https://cdn.bootcdn.net/ajax/libs/font-awesome/4.0.3/css/font-awesome.css">
	<link rel="stylesheet" href="/assets/website/css/G.css" />
	<!-- fonts -->
	<link href="https://fonts.googleapis.com/css2?family=Raleway:wght@400;500;600;800&family=Sen:wght@400;700;800&display=swap" rel="stylesheet">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="在vue项目中配置使用svg">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
	<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-516RBJER8X"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-516RBJER8X');
</script>
	<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!-- header section start -->
    <div class="header_section header_bg">
        <div class="container-fluid">
                        <nav class="navbar navbar-expand-lg navbar-light bg-light">
                <div class="logo">
                                        <a href="/">VPN网关</a>
                                    </div>
                <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                            </ul>
                </div>
            </nav>
        </div>
    </div>
    <!-- header section end -->
    <!-- about sectuion start -->
    <div class="about_section layout_padding">
        <div class="container">
            <div class="breadcrumb">
              <a href="/">首页</a> / 
              <a href="/news/">新闻资讯</a> / 
              <span>正文</span>
            </div>

            <div class="row">
                <div class="col-md-9">
                    <h1 class="services_taital mb-5">在vue项目中配置使用svg</h1>
                                    <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                <div class="xcblog-blog-detail xcblog-blog-detail-defined">
                      				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> <p>日常使用svg作为图标使用已经很常见了,以下为几种使用方式 .</p> <h3><code>file-loader</code> 解析资源文件</h3> <p>最原始的无非就是直接导入使用了 , webpack使用了<code>file-loader</code> 对所有静态资源进行路径解析,包括图片、字体、文件等.</p> <p>简单的配置对<code>.svg</code> 的解析.</p> <pre><code class="prism language-js">module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>   module<span class="token operator">:</span><span class="token punctuation">{<!-- --></span>     rules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span>         test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(svg)(\?.*)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>         use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span>             loader<span class="token operator">:</span><span class="token string">'file-loader'</span><span class="token punctuation">,</span>             options<span class="token operator">:</span><span class="token punctuation">{<!-- --></span>               name<span class="token operator">:</span><span class="token string">'img/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p><code>filer-loader</code> 可以解析<code>import/require()</code> 文件路径,并把文件输出到构建目录中.</p> <p>然后在组件文件中使用导入的资源</p> <pre><code class="prism language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>img<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"icon404"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>object<span class="token operator">:</span>data<span class="token operator">=</span><span class="token string">"icon404"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>object<span class="token operator">&gt;</span><span class="token operator">&lt;</span>iframe<span class="token operator">:</span>src<span class="token operator">=</span><span class="token string">"icon404"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>iframe<span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">&gt;</span><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> Component<span class="token punctuation">,</span> Vue<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span><span class="token comment">// import icon404 from "@/assets/icons/404.svg";</span><span class="token keyword">const</span> icon404<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"@/assets/images/icon-404.svg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">interface</span><span class="token class-name">IState</span><span class="token punctuation">{<!-- --></span>   description<span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span> @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   name<span class="token operator">:</span><span class="token string">"work-bench"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token keyword">class</span><span class="token class-name">extends</span> Vue<span class="token keyword">implements</span><span class="token class-name">IState</span><span class="token punctuation">{<!-- --></span>   description<span class="token operator">=</span><span class="token string">"展示当前项目拥有的组件,数据皆为模拟测试数据."</span><span class="token punctuation">;</span><span class="token comment">// 实例中定义引用</span>   icon404<span class="token operator">=</span> icon404<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></code></pre> <p>通过<code>img \ object \ iframe</code> 作为资源载体加载资源 . 这样引入的方式对于我们常用修改颜色、字号等产生很大不便. 组件中资源过多就存在大量的<code>import</code> .</p> <p>可以通过打印查看<code>icon404</code> 的值是什么? 是对引用的当前.svg资源的路径地址.</p> <h3><code>svg-sprite-loader</code> 声明式调用</h3> <p>为什么说是声明式调用 , 因为它将我们需要的svg资源作为一个模版变量,进而进行指向引用即可 .</p> <p>首先我们按照npm包文档指引进行配置.</p> <h4>安装</h4> <pre><code class="prism language-js"># 或 yarn npm install svg<span class="token operator">-</span>sprite<span class="token operator">-</span>loader<span class="token operator">-</span><span class="token constant">D</span></code></pre> <h4><code>webpack</code> 简单配置</h4> <p>变更了loader 为<code>svg-sprite-loader</code></p> <pre><code class="prism language-js">module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>   module<span class="token operator">:</span><span class="token punctuation">{<!-- --></span>     rules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span>         test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(svg)(\?.*)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>         use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span>             loader<span class="token operator">:</span><span class="token string">'svg-sprite-loader'</span><span class="token punctuation">,</span>             options<span class="token operator">:</span><span class="token punctuation">{<!-- --></span>               symbolId<span class="token operator">:</span><span class="token string">"icon-[name]"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <p>现在在看组件内的<code>.svg</code> 引入 . 已经加载不出来了,这里要注意的是<code>require</code> 导入,</p> <pre><code class="prism language-js"><span class="token comment">// ... 访问导入的值</span><span class="token keyword">this</span><span class="token punctuation">.</span>icon404<span class="token operator">=</span> icon404<span class="token punctuation">.</span>default<span class="token punctuation">;</span></code></pre> <h5>通过svg标签<code>use</code> 呈现</h5> <p>通过打印查看导入的内容icon404</p> <pre><code class="prism language-js"><span class="token operator">&lt;</span>symbol xmlns<span class="token operator">=</span><span class="token string">"http://www.w3.org/2000/svg"</span> xmlns<span class="token operator">:</span>xlink<span class="token operator">=</span><span class="token string">"http://www.w3.org/1999/xlink"</span> viewBox<span class="token operator">=</span><span class="token string">"0 0 400 400"</span> id<span class="token operator">=</span><span class="token string">"icon-icon-404"</span><span class="token operator">&gt;</span><span class="token comment">// ... svg 内容</span><span class="token operator">&lt;</span><span class="token operator">/</span>sysmbol<span class="token operator">&gt;</span></code></pre> <p>提供了<code>id</code> 作为引用键值 . 再使用<code>img \ object</code> 不行了, 了解过svg基础知识的同学知道,<code>symbol</code> 用来定义一个图形模版,然后使用<code>use</code> 呈现 .</p> <p><code>svg-sprite-loader</code> 会将加载的svg定义成<code>symbol</code> 汇聚到一个<code>&lt;svg&gt;</code> 元素中添加到body中.</p> <p>这样的话 , 我们局部定义svg引用对应的symbol , 通过<code>use</code>标签引用资源.</p> <p>导入的<code>icon404</code> 是一个<code>SpriteSymbol&lt;id,viewBox,content&gt;</code>实例, 通过<code>id</code> 进行访问 .</p> <pre><code class="prism language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>svg<span class="token operator">&gt;</span><span class="token operator">&lt;</span>use<span class="token operator">:</span>xlink<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"`#${icon404.id}`"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span></code></pre> <p>当我们知道了svg的名称之后,加上webpack的配置<code>symbolId: "icon-[name]"</code> , 就不需要使用<code>icon404</code> 对象了,只需要导入</p> <pre><code class="prism language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span>svg<span class="token operator">&gt;</span><span class="token operator">&lt;</span>use<span class="token operator">:</span>xlink<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"#icon-icon-404"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">&gt;</span><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> Component<span class="token punctuation">,</span> Vue<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span><span class="token comment">// import icon404 from "@/assets/icons/404.svg";</span><span class="token comment">// const icon404 = require("@/assets/images/icon-404.svg");</span><span class="token comment">// 直接导入资源</span><span class="token keyword">import</span><span class="token string">"@/assets/icons/404.svg"</span><span class="token punctuation">;</span><span class="token keyword">interface</span><span class="token class-name">IState</span><span class="token punctuation">{<!-- --></span>     description<span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span>    @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>     name<span class="token operator">:</span><span class="token string">"work-bench"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token keyword">class</span><span class="token class-name">extends</span> Vue<span class="token keyword">implements</span><span class="token class-name">IState</span><span class="token punctuation">{<!-- --></span>     description<span class="token operator">=</span><span class="token string">"展示当前项目拥有的组件,数据皆为模拟测试数据."</span><span class="token punctuation">;</span><span class="token comment">// 此处已不再需要定义实例中的变量</span><span class="token comment">// icon404 = icon404.default;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></code></pre> <p>就可以愉快的使用啦. 这样还存在一个问题就是,每个需要使用的组件都需要导入 . 而且这明显可以作为一个模版抽离出来进行组件化使用.</p> <h5>批量处理svg</h5> <p>按照上面的思路,我们可以定一个<code>index.ts</code> . 导入所有的svg图片,然后导出 ,</p> <pre><code class="prism language-ts"><span class="token comment">// 引入一遍所有的svg图标</span><span class="token keyword">import</span><span class="token string">'@/assets/images/icon-404.svg'</span><span class="token keyword">import</span><span class="token string">'@/assets/images/icon-404.svg'</span><span class="token keyword">import</span><span class="token string">'@/assets/images/icon-404.svg'</span><span class="token keyword">import</span><span class="token string">'@/assets/images/icon-404.svg'</span><span class="token comment">// ... 更多</span></code></pre> <p>记得要在主入口文件<code>main.ts</code> 引入.</p> <pre><code class="prism language-ts"><span class="token comment">// icon-svg</span><span class="token keyword">import</span><span class="token string">"@/components/svgIcon/index.ts"</span><span class="token punctuation">;</span></code></pre> <p>这样在所有vue组件中使用,不需要每次都导入了svg了.</p> <h5>定义<code>svg-icon</code> 公共组件</h5> <p>当我们在多个组件中使用某一代码段时,我们就想把它抽离成组件.定一个<code>svgIcon.vue</code> . 这样的</p> <pre><code class="prism language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>svg<span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"svgClass"</span> v<span class="token operator">-</span>on<span class="token operator">=</span><span class="token string">"$listeners"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>use<span class="token operator">:</span>xlink<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"svgName"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">&gt;</span><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> Component<span class="token punctuation">,</span> Vue<span class="token punctuation">,</span> Prop<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span>  @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   name<span class="token operator">:</span><span class="token string">"svg-icon"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token keyword">class</span><span class="token class-name">extends</span> Vue<span class="token punctuation">{<!-- --></span>   @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">/* 图标名称 */</span> readonly iconName<span class="token operator">!</span><span class="token operator">:</span> string<span class="token punctuation">;</span>   @<span class="token function">Prop</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token keyword">default</span><span class="token operator">:</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">/* 图标类名 */</span> readonly iconClass<span class="token operator">?</span><span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token comment">// 我们配置的loader 选项中,定义了 icon-[name]</span><span class="token keyword">get</span><span class="token function">svgName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">#icon-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>iconName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">get</span><span class="token function">svgClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token keyword">return</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">svg-icon</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${<!-- --></span><span class="token keyword">this</span><span class="token punctuation">.</span>iconClass<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span class="token operator">&lt;</span>style lang<span class="token operator">=</span><span class="token string">"less"</span> scoped<span class="token operator">&gt;</span><span class="token punctuation">.</span>svg<span class="token operator">-</span>icon<span class="token punctuation">{<!-- --></span>   width<span class="token operator">:</span><span class="token number">1</span>em<span class="token punctuation">;</span>   height<span class="token operator">:</span><span class="token number">1</span>em<span class="token punctuation">;</span>   fill<span class="token operator">:</span> currentColor<span class="token punctuation">;</span>   overflow<span class="token operator">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span></code></pre> <p>包含了svg名称 , 内部处理引入的<code>sysmbolId</code> . 使用的人只需要知道svg名称是什么就行了. 不关注webpack配置. 还可以加上自定义class名.以及原生事件等等.</p> <p>注册为全局组件,在<code>index.ts</code> 调整,</p> <pre><code class="prism language-ts"><span class="token keyword">import</span> Vue<span class="token keyword">from</span><span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> SvgIcon<span class="token keyword">from</span><span class="token string">"./index.vue"</span><span class="token punctuation">;</span><span class="token comment">// 引入一遍所有的svg图标</span><span class="token keyword">import</span><span class="token string">'@/assets/images/icon-404.svg'</span><span class="token keyword">import</span><span class="token string">'@/assets/images/icon-404.svg'</span><span class="token keyword">import</span><span class="token string">'@/assets/images/icon-404.svg'</span><span class="token keyword">import</span><span class="token string">'@/assets/images/icon-404.svg'</span><span class="token comment">// ... 更多</span><span class="token comment">// SVG 图标</span> Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"svg-icon"</span><span class="token punctuation">,</span> SvgIcon<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre> <p>然后就可以在所所有的组件中愉快的使用公共组件<code>svg-icon</code> 了,不需要每次都导入.</p> <p>怎么使用呢, 还是上面的组件.</p> <pre><code class="prism language-js"><span class="token operator">&lt;</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&lt;</span>svg<span class="token operator">&gt;</span><span class="token operator">&lt;</span>use<span class="token operator">:</span>xlink<span class="token operator">:</span>href<span class="token operator">=</span><span class="token string">"#icon-icon-404"</span><span class="token operator">/</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">&gt;</span><span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 正常使用一个vue组件<span class="token operator">--</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span>svg<span class="token operator">-</span>icon iconName<span class="token operator">=</span><span class="token string">"icon-404"</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>svg<span class="token operator">-</span>icon<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">&gt;</span><span class="token operator">&lt;</span>script lang<span class="token operator">=</span><span class="token string">"ts"</span><span class="token operator">&gt;</span><span class="token keyword">import</span><span class="token punctuation">{<!-- --></span> Component<span class="token punctuation">,</span> Vue<span class="token punctuation">}</span><span class="token keyword">from</span><span class="token string">"vue-property-decorator"</span><span class="token punctuation">;</span><span class="token comment">// 导入不需要</span><span class="token comment">// import icon404 from "@/assets/icons/404.svg";</span><span class="token comment">// const icon404 = require("@/assets/images/icon-404.svg");</span><span class="token keyword">interface</span><span class="token class-name">IState</span><span class="token punctuation">{<!-- --></span>   description<span class="token operator">:</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span>  @<span class="token function">Component</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>   name<span class="token operator">:</span><span class="token string">"work-bench"</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">export</span><span class="token keyword">default</span><span class="token keyword">class</span><span class="token class-name">extends</span> Vue<span class="token keyword">implements</span><span class="token class-name">IState</span><span class="token punctuation">{<!-- --></span>   description<span class="token operator">=</span><span class="token string">"展示当前项目拥有的组件,数据皆为模拟测试数据."</span><span class="token punctuation">;</span><span class="token comment">// 不需要</span><span class="token comment">// icon404 = icon404.default;</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span></code></pre> <p>是不是很完美 . 还需要优化的点就是加载svg资源的,我们只不过是换了个地方<code>import</code></p> <pre><code class="prism language-ts"><span class="token comment">// 引入一遍所有的svg图标</span><span class="token keyword">import</span><span class="token string">'@/assets/images/icon-404.svg'</span><span class="token comment">// 成百上千个 ....</span></code></pre> <p>想办法批量加载完成 . 幸好webpack提供了一个API 用于做批量加载的事情.传送门</p> <h5><code>require.context</code> 引入指定文件夹下的所有文件</h5> <p><code>require.context(dir,useSubDir,regExp,mode)</code></p> <ol> <li>需要加载的目录路径</li> <li>是否需要搜索其他子目录.</li> <li>加载匹配文件的正则表达式.</li> <li>加载方式<code>mode=sync</code></li> </ol> <p>返回一个require函数 ,可以接受一个request参数 ;</p> <p>require函数三个静态属性<code>resolve,keys,id</code> . 通过编译属性<code>kyes</code> 执行每一个加载资源的请求.</p> <pre><code class="prism language-js"><span class="token comment">// 指定目录加载所有的.svg资源</span><span class="token keyword">const</span> req<span class="token operator">=</span> require<span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">"@/assets/images"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 编译req属性的keys , 对每一个资源路径执行加载函数</span> req<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span></code></pre> <p>然后我们的<code>index.ts</code> 文件就修改为</p> <pre><code class="prism language-ts"><span class="token keyword">import</span> Vue<span class="token keyword">from</span><span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> SvgIcon<span class="token keyword">from</span><span class="token string">"./index.vue"</span><span class="token punctuation">;</span><span class="token comment">// import "@/assets/images/icon-404.svg";</span><span class="token comment">// SVG 图标</span> Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"svg-icon"</span><span class="token punctuation">,</span> SvgIcon<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> req<span class="token operator">=</span><span class="token keyword">require</span><span class="token punctuation">.</span><span class="token function">context</span><span class="token punctuation">(</span><span class="token string">"@/assets/images"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> req<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span></code></pre> <p>看起来就简洁多了, 你只需要往这个目录添加你想要使用的svg资源就行了, 然后在项目中使用它.</p> <h4><code>vue.config.js</code> 配置</h4> <p>上面简单的自定义webpack配置时,如何配置webpack. 通常我们都使用了<code>vue-cli</code> 脚手架搭建vue项目.</p> <p>那就要在<code>vue.config.js</code> 中调整loader配置了.</p> <pre><code class="prism language-js"><span class="token comment">// vue.config.js</span><span class="token comment">// eslint-disable-next-line</span><span class="token keyword">const</span> path<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token function-variable function">chainWebpack</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token comment">// svg-sprite-loader</span>     config<span class="token punctuation">.</span>module<span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"svg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     config<span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">"svg-sprite-loader"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>include<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"./src/assets/icons"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"svg-sprite-loader"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">"svg-sprite-loader"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> symbolId<span class="token operator">:</span><span class="token string">"icon-[name]"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <p>首先移除了<code>.svg</code> 的默认loader 规则配置. 开始添加针对<code>.svg</code> 文件的loader规则配置.</p> <p>关于<code>vue.config.js</code> 配置详解,还会有另一篇文章来说明 . 解析<code>chainWebpack</code>是如何运转的.</p> <h3><code>svgo-loader</code> 优化svg</h3> <p><code>svgo-loader</code>依赖安装<code>svgo</code> , 用来优化svg资源 , 清理掉多余、不必要的信息,比如:元数据信息、批注信息、隐藏的元素等.</p> <p>还有用来操作svg,<code>svgo</code> 可以转换svg<code>SVG-as-XML</code><code>SVG-as-JS</code> AST 树从而手动新增、更新、删减元素 .</p> <pre><code class="prism language-js"><span class="token punctuation">{<!-- --></span>     content<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span>         doctype<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span>         comment<span class="token operator">:</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span>         elem<span class="token operator">:</span><span class="token string">'svg'</span><span class="token punctuation">,</span>         local<span class="token operator">:</span><span class="token string">'svg'</span><span class="token punctuation">,</span>         attrs<span class="token operator">:</span><span class="token punctuation">{<!-- --></span><span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>         content<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span><span class="token comment">// ... 嵌套子元素</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre> <p>需要更详细操作svg的可以自行去查看这个库, 没怎么具体使用过. 如果有这方面的需求,肯定还有有更细致的文章.</p> <p>了解过之后,再来看<code>svgo-loader</code></p> <h4>安装</h4> <pre><code class="prism language-shell"><span class="token function">npm</span><span class="token function">install</span> svgo-loader --save-dev</code></pre> <h4><code>webpack</code> 配置</h4> <p>简单的配置,需要明确的是它不是<code>file-loader \ svg-sprite-loader</code> 的替代. 作用不一样.</p> <p>起一个中间优化的作用.配置中添加<code>svgo-loader</code> 即可.</p> <pre><code class="prism language-js">module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{<!-- --></span>   module<span class="token operator">:</span><span class="token punctuation">{<!-- --></span>     rules<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span>         test<span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.(svg)(\?.*)?$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>         use<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{<!-- --></span>             loader<span class="token operator">:</span><span class="token string">'file-loader'</span><span class="token punctuation">,</span>             options<span class="token operator">:</span><span class="token punctuation">{<!-- --></span>               name<span class="token operator">:</span><span class="token string">'img/[name].[hash:8].[ext]'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span>             loader<span class="token operator">:</span><span class="token string">"svgo-loader"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre> <h4><code>vue.config.js</code> 配置</h4> <p>在之前配置的<code>svg-sprite-loader</code> 追加loader配置即可.</p> <pre><code class="prism language-js"><span class="token comment">// vue.config.js</span><span class="token comment">// eslint-disable-next-line</span><span class="token keyword">const</span> path<span class="token operator">=</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  module<span class="token punctuation">.</span>exports<span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token function-variable function">chainWebpack</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token parameter">config</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{<!-- --></span><span class="token comment">// svg-sprite-loader</span>     config<span class="token punctuation">.</span>module<span class="token punctuation">.</span>rules<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"svg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     config<span class="token punctuation">.</span>module<span class="token punctuation">.</span><span class="token function">rule</span><span class="token punctuation">(</span><span class="token string">"svg-sprite-loader"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">\.svg$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>include<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">"./src/assets/icons"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"svg-sprite-loader"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">"svg-sprite-loader"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">options</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span> symbolId<span class="token operator">:</span><span class="token string">"icon-[name]"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"svgo-loader"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loader</span><span class="token punctuation">(</span><span class="token string">"svgo-loader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre> <h3>链接资源</h3> <p>webpack依赖管理-require语句 -</p> <p>svg基础知识学习</p> </div> 			                </div>
                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-108783.htm">动物疫苗现状 动物疫苗现状分析</a></p>
                                        <p>下一个：<a href="/news/article-109642.htm">动物疫苗打几次有效果啊 动物疫苗打几次有效果啊视频</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-107959.htm" title="动物防疫站打疫苗贵吗现在（动物防疫站可以打疫苗吗）">动物防疫站打疫苗贵吗现在（动物防疫站可以打疫苗吗）</a></li>
                        <li class="py-2"><a href="/news/article-94853.htm" title="动物疫苗的作用原理和方法图片 动物疫苗的作用原理和方法图片大全">动物疫苗的作用原理和方法图片 动物疫苗的作用原理和方法图片大全</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-22-clash-v2ray-ss-ssr.htm" title="VPN网关 | 4月22日18.4M/S|免费Clash/V2ray/Shadowrocket/SSR订阅节点">VPN网关 | 4月22日18.4M/S|免费Clash/V2ray/Shadowrocket/SSR订阅节点</a></li>
                        <li class="py-2"><a href="/news/article-89597.htm" title="Amazing巧用 CSS 视差实现酷炫交互动效详解">Amazing巧用 CSS 视差实现酷炫交互动效详解</a></li>
                        <li class="py-2"><a href="/news/article-86702.htm" title="动物医院主管部门是谁负责（动物医院监管部门）">动物医院主管部门是谁负责（动物医院监管部门）</a></li>
                        <li class="py-2"><a href="/news/article-96342.htm" title="小猫养多久才知道自己的名字了（幼猫养多久能知道主人叫它）">小猫养多久才知道自己的名字了（幼猫养多久能知道主人叫它）</a></li>
                        <li class="py-2"><a href="/news/article-91857.htm" title="啥属相不能养狗（哪个属相不能养狗）">啥属相不能养狗（哪个属相不能养狗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-4-28-free-node-subscribe.htm" title="VPN网关 | 4月28日18.7M/S|免费Clash/SSR/Shadowrocket/V2ray订阅节点">VPN网关 | 4月28日18.7M/S|免费Clash/SSR/Shadowrocket/V2ray订阅节点</a></li>
                        <li class="py-2"><a href="/news/article-95591.htm" title="宠物领养介绍（宠物领养简介）">宠物领养介绍（宠物领养简介）</a></li>
                        <li class="py-2"><a href="/news/article-87421.htm" title="设计模式学习笔记桥接模式及其应用">设计模式学习笔记桥接模式及其应用</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">14</span> <a href="/date/2025-05/" title="2025-05 归档">2025-05</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">87</span> <a href="/date/2025-04/" title="2025-04 归档">2025-04</a></h4>
            </li>
                    </ul>
    </div>
</div>


                </div>
            </div>
        </div>
    </div>
    <!-- about sectuion end -->
        <!-- copyright section start -->
    <div class="copyright_section">
        <div class="container">
            <div class="row">
                <div class="col-sm-12">
                                        <p>
                                                <a href="/">首页</a> |
                                                <a href="/free-nodes/">免费节点</a> |
                                                <a href="/paid-subscribe/">推荐机场</a> |
                                                <a href="/news/">新闻资讯</a> |
                                                <a href="/client.htm">客户端</a> |
                                                <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                    <p class="copyright_text">
                            VPN网关 VPN免费节点订阅官网 版权所有
                            <br />
                            Powered by WordPress
                    </p>
                </div>
            </div>
        </div>
    </div>
    <!-- copyright section end -->
    <!-- Javascript files-->
    <script src="/assets/website/js/frontend/clashnodesfree/jquery.min.js"></script>
    <script src="/assets/website/js/frontend/clashnodesfree/popper.min.js"></script>
    <script src="/assets/website/js/frontend/clashnodesfree/bootstrap.bundle.min.js"></script>
    <script src="/assets/website/js/frontend/clashnodesfree/jquery-3.0.0.min.js"></script>
    <script src="/assets/website/js/frontend/clashnodesfree/plugin.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>